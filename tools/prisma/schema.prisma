generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  email
  github
  google
  linkedin
}

enum Visibility {
  public
  private
}

enum PricingType {
  one_time
  recurring
}

enum Interval {
  day
  week
  month
  year
}

enum PaymentStatus {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
  paused
}

model User {
  id               String         @id @default(cuid())
  name             String
  picture          String?
  username         String         @unique
  email            String         @unique
  locale           String         @default("en-US")
  emailVerified    Boolean        @default(false)
  twoFactorEnabled Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  billingAddress   Json?          @default("{}")
  paymentMethod    Json?          @default("{}")
  provider         Provider
  secrets          Secrets?
  resumes          Resume[]
  customer         Customer?
  subscription     Subscription[]
}

model Secrets {
  id                   String    @id @default(cuid())
  password             String?
  lastSignedIn         DateTime?
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[]  @default([])
  refreshToken         String?
  resetToken           String?   @unique
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id         String     @id @default(cuid())
  title      String
  slug       String
  jobTitle   String?
  data       Json       @default("{}")
  visibility Visibility @default(private)
  locked     Boolean    @default(false)
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index(fields: [userId])
}

model Customer {
  id               String @id
  stripeCustomerId String
  user             User   @relation(fields: [id], references: [id], onDelete: Cascade)

  @@unique([id, stripeCustomerId])
  @@index(fields: [stripeCustomerId])
}

model Product {
  id          String  @id @default(cuid())
  active      Boolean @default(false)
  name        String
  description String?
  image       String?
  metadata    Json?   @default("{}")

  prices Price[]
}

model Price {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  active      Boolean @default(false)
  description String?
  unitAmount  Int?
  currency    String  @default("INR") @db.VarChar(3)

  pricingType     PricingType
  interval        Interval?
  intervalCount   Int?        @default(0)
  trialPeriodDays Int?        @default(0)
  metadata        Json?       @default("{}")

  subscription Subscription[]
}

model Subscription {
  id       String        @id @default(cuid())
  userId   String
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status   PaymentStatus
  metadata Json?         @default("{}")
  priceId  String
  price    Price         @relation(fields: [priceId], references: [id], onDelete: Cascade)

  quantity           Int
  cancelAtPeriodEnd  Boolean
  createdAt          DateTime  @default(now())
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  endedAt            DateTime?
  cancelAt           DateTime?
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?

  @@index(fields: [userId])
}

// model JobTitle {
//   id    String @id @default(cuid())
//   title String

//   relatedBy JobTitle[] @relation("RelatedJobTitles")
//   relating  JobTitle[] @relation("RelatedJobTitles")

//   categories               JobTitleCategory[]
//   recommendations RecommendationSnippet[]
// }

// model JobTitleCategory {
//   id    String @id @default(cuid())
//   title String

//   jobTitles                JobTitle[]
// }

// model RecommendationSnippet {
//   id         String @id @default(cuid())
//   phrase     String
//   highlight  String
//   locale     String @default("en") @db.VarChar(2)
//   usageCount Int    @default(0)

//   jobTitleId String
//   jobTitle   JobTitle @relation(fields: [jobTitleId], references: [id], onDelete: Cascade)

//   subPhrases RecommendationSnippet[] @relation("SubPhrases")
//   phrases    RecommendationSnippet[] @relation("SubPhrases")

//   @@index(fields: [jobTitleId, phrase])
// }
