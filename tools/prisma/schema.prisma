generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  email
  github
  google
  openid
}

enum Visibility {
  public
  private
}

model User {
  id               String   @id @default(cuid())
  name             String
  picture          String?
  username         String   @unique
  email            String   @unique
  locale           String   @default("en-US")
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         Provider
  secrets          Secrets?
  resumes          Resume[]

  TeamsMapping   TeamsMapping[]
  CompanyMapping CompanyMapping[]

  profileResumeId String?

  // Section references
  basics         BasicsItem[]
  profiles       ProfileItem[]
  experiences    WorkItem[]
  education      EducationItem[]
  skills         SkillItem[]
  languages      LanguageItem[]
  awards         AwardItem[]
  certifications CertificationItem[]
  interests      InterestItem[]
  projects       ProjectItem[]
  publications   PublicationItem[]
  volunteering   VolunteerItem[]
  references     ReferenceItem[]
}

model Secrets {
  id                   String   @id @default(cuid())
  password             String?
  lastSignedIn         DateTime @default(now())
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[] @default([])
  refreshToken         String?
  resetToken           String?  @unique
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}

model Resume {
  id         String      @id @default(cuid())
  title      String
  slug       String
  data       Json        @default("{}")
  visibility Visibility  @default(private)
  locked     Boolean     @default(false)
  statistics Statistics?
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  TeamsMapping                   TeamsMapping[]
  ResumeProfileItemMapping       ResumeProfileItemMapping[]
  ResumeBasicsItemMapping        ResumeBasicsItemMapping[]
  ResumeWorkItemMapping          ResumeWorkItemMapping[]
  ResumeAwardItemMapping         ResumeAwardItemMapping[]
  ResumeSkillItemMapping         ResumeSkillItemMapping[]
  ResumeProjectItemMapping       ResumeProjectItemMapping[]
  ResumeEducationItemMapping     ResumeEducationItemMapping[]
  ResumeInterestItemMapping      ResumeInterestItemMapping[]
  ResumeLanguageItemMapping      ResumeLanguageItemMapping[]
  ResumeVolunteerItemMapping     ResumeVolunteerItemMapping[]
  ResumeReferenceItemMapping     ResumeReferenceItemMapping[]
  ResumePublicationItemMapping   ResumePublicationItemMapping[]
  ResumeCertificationItemMapping ResumeCertificationItemMapping[]

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index(fields: [userId])
}

model Statistics {
  id        String   @id @default(cuid())
  views     Int      @default(0)
  downloads Int      @default(0)
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([resumeId, id])
}

model WorkItem {
  id                    String                  @id @default(cuid())
  userId                String
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                  String?
  position              String?
  url                   String?
  summary               String?
  date                  Json?
  updatedAt             DateTime                @updatedAt
  ResumeWorkItemMapping ResumeWorkItemMapping[]
}

model AwardItem {
  id                     String                   @id @default(cuid())
  userId                 String
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title                  String?
  awarder                String?
  url                    String?
  summary                String?
  date                   String?
  updatedAt              DateTime                 @updatedAt
  ResumeAwardItemMapping ResumeAwardItemMapping[]
}

model SkillItem {
  id                     String                   @id @default(cuid())
  userId                 String
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                   String?
  level                  String?
  keywords               Json?
  levelNum               Int?
  updatedAt              DateTime                 @updatedAt
  ResumeSkillItemMapping ResumeSkillItemMapping[]
}

model ProjectItem {
  id                       String                     @id @default(cuid())
  userId                   String
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                     String?
  url                      String?
  summary                  String?
  description              String?
  keywords                 Json?
  date                     Json?
  updatedAt                DateTime                   @updatedAt
  ResumeProjectItemMapping ResumeProjectItemMapping[]
}

model EducationItem {
  id                         String                       @id @default(cuid())
  userId                     String
  user                       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  institution                String?
  area                       String?
  degree                     String?
  score                      String?
  courses                    Json?
  summary                    String?
  url                        String?
  date                       Json?
  updatedAt                  DateTime                     @updatedAt
  ResumeEducationItemMapping ResumeEducationItemMapping[]
}

model InterestItem {
  id                        String                      @id @default(cuid())
  userId                    String
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                      String?
  keywords                  Json?
  updatedAt                 DateTime                    @updatedAt
  ResumeInterestItemMapping ResumeInterestItemMapping[]
}

model LanguageItem {
  id                        String                      @id @default(cuid())
  userId                    String
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                      String?
  level                     String?
  levelNum                  Int?
  updatedAt                 DateTime                    @updatedAt
  ResumeLanguageItemMapping ResumeLanguageItemMapping[]
}

model VolunteerItem {
  id                         String                       @id @default(cuid())
  userId                     String
  user                       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization               String?
  position                   String?
  url                        String?
  summary                    String?
  date                       Json?
  updatedAt                  DateTime                     @updatedAt
  ResumeVolunteerItemMapping ResumeVolunteerItemMapping[]
}

model ReferenceItem {
  id                         String                       @id @default(cuid())
  userId                     String
  user                       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                       String?
  email                      String?
  phone                      String?
  summary                    String?
  relationship               String?
  updatedAt                  DateTime                     @updatedAt
  ResumeReferenceItemMapping ResumeReferenceItemMapping[]
}

model PublicationItem {
  id                           String                         @id @default(cuid())
  userId                       String
  user                         User                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                         String?
  publisher                    String?
  url                          String?
  summary                      String?
  date                         Json?
  updatedAt                    DateTime                       @updatedAt
  ResumePublicationItemMapping ResumePublicationItemMapping[]
}

model CertificationItem {
  id                             String                           @id @default(cuid())
  userId                         String
  user                           User                             @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                           String?
  issuer                         String?
  url                            String?
  summary                        String?
  date                           Json?
  updatedAt                      DateTime                         @updatedAt
  ResumeCertificationItemMapping ResumeCertificationItemMapping[]
}

model ProfileItem {
  id                       String                     @id @default(cuid())
  userId                   String
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  network                  String?
  url                      String?
  username                 String?
  updatedAt                DateTime                   @updatedAt
  ResumeProfileItemMapping ResumeProfileItemMapping[]
}

model BasicsItem {
  id                      String                    @id @default(cuid())
  userId                  String
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                    String?
  email                   String?
  phone                   String?
  headline                String?
  summary                 Json?
  birthdate               String?
  website                 String?
  profiles                Json?
  location                Json?
  photo                   Json?
  updatedAt               DateTime                  @updatedAt
  ResumeBasicsItemMapping ResumeBasicsItemMapping[]
}

model ResumeProfileItemMapping {
  id            String      @id @default(cuid())
  resumeId      String
  profileItemId String
  resume        Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  profileItem   ProfileItem @relation(fields: [profileItemId], references: [id], onDelete: Cascade)
  order         Int

  @@unique([resumeId, order])
}

model ResumeBasicsItemMapping {
  id           String     @id @default(cuid())
  resumeId     String
  basicsItemId String
  resume       Resume     @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  basicsItem   BasicsItem @relation(fields: [basicsItemId], references: [id], onDelete: Cascade)
  order        Int

  @@unique([resumeId, order])
}

model ResumeWorkItemMapping {
  id         String   @id @default(cuid())
  resumeId   String
  workItemId String
  resume     Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  workItem   WorkItem @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  order      Int

  @@unique([resumeId, order])
}

model ResumeAwardItemMapping {
  id          String    @id @default(cuid())
  resumeId    String
  awardItemId String
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  awardItem   AwardItem @relation(fields: [awardItemId], references: [id], onDelete: Cascade)
  order       Int

  @@unique([resumeId, order])
}

model ResumeSkillItemMapping {
  id          String    @id @default(cuid())
  resumeId    String
  skillItemId String
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  skillItem   SkillItem @relation(fields: [skillItemId], references: [id], onDelete: Cascade)
  order       Int

  @@unique([resumeId, order])
}

model ResumeProjectItemMapping {
  id            String      @id @default(cuid())
  resumeId      String
  projectItemId String
  resume        Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  projectItem   ProjectItem @relation(fields: [projectItemId], references: [id], onDelete: Cascade)
  order         Int

  @@unique([resumeId, order])
}

model ResumeEducationItemMapping {
  id              String        @id @default(cuid())
  resumeId        String
  educationItemId String
  resume          Resume        @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  educationItem   EducationItem @relation(fields: [educationItemId], references: [id], onDelete: Cascade)
  order           Int

  @@unique([resumeId, order])
}

model ResumeInterestItemMapping {
  id             String       @id @default(cuid())
  resumeId       String
  interestItemId String
  resume         Resume       @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  interestItem   InterestItem @relation(fields: [interestItemId], references: [id], onDelete: Cascade)
  order          Int

  @@unique([resumeId, order])
}

model ResumeLanguageItemMapping {
  id             String       @id @default(cuid())
  resumeId       String
  languageItemId String
  resume         Resume       @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  languageItem   LanguageItem @relation(fields: [languageItemId], references: [id], onDelete: Cascade)
  order          Int

  @@unique([resumeId, order])
}

model ResumeVolunteerItemMapping {
  id              String        @id @default(cuid())
  resumeId        String
  volunteerItemId String
  resume          Resume        @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  volunteerItem   VolunteerItem @relation(fields: [volunteerItemId], references: [id], onDelete: Cascade)
  order           Int

  @@unique([resumeId, order])
}

model ResumeReferenceItemMapping {
  id              String        @id @default(cuid())
  resumeId        String
  referenceItemId String
  resume          Resume        @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  referenceItem   ReferenceItem @relation(fields: [referenceItemId], references: [id], onDelete: Cascade)
  order           Int

  @@unique([resumeId, order])
}

model ResumePublicationItemMapping {
  id                String          @id @default(cuid())
  resumeId          String
  publicationItemId String
  resume            Resume          @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  publicationItem   PublicationItem @relation(fields: [publicationItemId], references: [id], onDelete: Cascade)
  order             Int

  @@unique([resumeId, order])
}

model ResumeCertificationItemMapping {
  id                  String            @id @default(cuid())
  resumeId            String
  certificationItemId String
  resume              Resume            @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  certificationItem   CertificationItem @relation(fields: [certificationItemId], references: [id], onDelete: Cascade)
  order               Int

  @@unique([resumeId, order])
}

model Team {
  id        String   @id @default(cuid())
  name      String
  //Owner of the team
  userId    String
  updatedAt DateTime @updatedAt

  TeamsMapping TeamsMapping[]

  @@unique([name, userId])
}

model TeamsMapping {
  id       String  @id @default(cuid())
  teamId   String
  team     Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId String?
  resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model CompanyMapping {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  roleId    String?
  role      Role?   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model Company {
  id        String   @id @default(cuid())
  name      String
  updatedAt DateTime @updatedAt

  CompanyMapping CompanyMapping[]
}

model Role {
  id        String   @id @default(cuid())
  name      String
  updatedAt DateTime @updatedAt

  CompanyMapping CompanyMapping[]
}
