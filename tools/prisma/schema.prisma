generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  email
  github
  google
  openid
}

enum Visibility {
  public
  private
}

model User {
  id               String   @id @default(cuid())
  name             String
  picture          String?
  username         String   @unique
  email            String   @unique
  locale           String   @default("en-US")
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         Provider
  secrets          Secrets?
  resumes          Resume[]

  TeamsMapping TeamsMapping[]

  CompanyMapping CompanyMapping[]
}

model Secrets {
  id                   String   @id @default(cuid())
  password             String?
  lastSignedIn         DateTime @default(now())
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[] @default([])
  refreshToken         String?
  resetToken           String?  @unique
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}

model Resume {
  id         String      @id @default(cuid())
  title      String
  slug       String
  data       Json        @default("{}")
  visibility Visibility  @default(private)
  locked     Boolean     @default(false)
  statistics Statistics?
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  SectionCVMapping SectionCVMapping[]
  TeamsMapping     TeamsMapping[]

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index(fields: [userId])
}

model Statistics {
  id        String   @id @default(cuid())
  views     Int      @default(0)
  downloads Int      @default(0)
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([resumeId, id])
}

enum SectionFormat {
  Basics
  Profiles
  Experience
  Education
  Skills
  Languages
  Awards
  Certifications
  Interests
  Projects
  Publications
  Volunteering
  References
  Custom
}

model Section {
  id        String        @id @default(cuid())
  format    SectionFormat
  userID    String
  data      Json          @default("{}")
  updatedAt DateTime      @updatedAt

  SectionCVMapping SectionCVMapping[]
}

model SectionCVMapping {
  id        String  @id @default(cuid())
  seciondID String  @unique
  section   Section @relation(fields: [seciondID], references: [id], onDelete: Cascade)
  resumeID  String  @unique
  resume    Resume  @relation(fields: [resumeID], references: [id], onDelete: Cascade)
  order     Int

  @@unique([resumeID, order])
}

model Team {
  id        String   @id @default(cuid())
  name      String
  //Owner of the team
  userID    String
  updatedAt DateTime @updatedAt

  TeamsMapping TeamsMapping[]

  @@unique([name, userID])
}

model TeamsMapping {
  id       String  @id @default(cuid())
  teamID   String
  team     Team    @relation(fields: [teamID], references: [id], onDelete: Cascade)
  userID   String
  user     User    @relation(fields: [userID], references: [id], onDelete: Cascade)
  resumeID String?
  resume   Resume? @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@unique([teamID, userID])
}

model CompanyMapping {
  id        String  @id @default(cuid())
  userID    String
  user      User    @relation(fields: [userID], references: [id], onDelete: Cascade)
  companyID String
  company   Company @relation(fields: [companyID], references: [id], onDelete: Cascade)
  roleID    String?
  role      Role?   @relation(fields: [roleID], references: [id], onDelete: Cascade)

  @@unique([userID, companyID])
}

model Company {
  id        String   @id @default(cuid())
  name      String
  updatedAt DateTime @updatedAt

  CompanyMapping CompanyMapping[]
}

model Role {
  id        String   @id @default(cuid())
  name      String
  updatedAt DateTime @updatedAt

  CompanyMapping CompanyMapping[]
}
